name: CI

on:
  push:
    branches:
    - main
  pull_request:
    branches:
    - main

jobs:
  gir:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout frida-gum
        uses: actions/checkout@v2
      - name: Dependencies
        run: |
          sudo apt-get update
          sudo apt-get install \
            gobject-introspection \
            libdwarf-dev \
            libelf-dev \
            libgirepository1.0-dev \
            libglib2.0-dev \
            libjson-glib-dev \
            libsoup2.4-dev \
            libsqlite3-dev \
            libunwind-dev \
            ninja-build
          pip install meson==0.61.2
      - name: Build
        run: |
          meson setup \
            -Dgumpp=enabled \
            -Dgumjs=enabled \
            build
          meson compile -C build

  windows:
    runs-on: windows-latest
    strategy:
      matrix:
        arch:
          - amd64
          - amd64_x86
    steps:
      - name: Checkout frida-gum
        uses: actions/checkout@v2
      - name: Dependencies
        run: pip install meson==0.61.2 ninja
      - name: Environment
        uses: ilammy/msvc-dev-cmd@v1
        with:
          arch: ${{ matrix.arch }}
      - name: Build
        run: |
          meson setup `
            --default-library static `
            -Dgumpp=enabled `
            -Dgumjs=enabled `
            build
          meson compile -C build
      - name: Test
        run: |
          Copy-Item build\bindings\gumpp\frida-gumpp-1.0.dll -Destination build\tests\
          .\build\tests\gum-tests.exe

  macos-x86_64:
    runs-on: macos-latest
    steps:
      - name: Checkout frida-gum
        uses: actions/checkout@v2
      - name: Dependencies
        run: pip3 install meson==0.61.2 ninja
      - name: Build
        run: |
          meson setup \
            --default-library static \
            -Dgumpp=enabled \
            -Dgumjs=enabled \
            build
          meson compile -C build
      - name: Test
        run: ./build/tests/gum-tests

  linux-x86_64:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout frida-gum
        uses: actions/checkout@v2
      - name: Dependencies
        run: pip install meson==0.61.2 ninja
      - name: Build
        run: |
          meson setup \
            --default-library static \
            -Dgumpp=enabled \
            -Dgumjs=enabled \
            build
          meson compile -C build
      - name: Test
        run: ./build/tests/gum-tests

  ios-arm64:
    runs-on: macos-latest
    steps:
      - name: Checkout frida-gum
        uses: actions/checkout@v2
      - name: Dependencies
        run: |
          pip3 install meson==0.61.2
          mkdir -p /tmp/toolchain /tmp/native-sdk /tmp/cross-sdk
          deps_url=https://build.frida.re/deps/20220130
          curl $deps_url/toolchain-macos-x86_64.tar.bz2 | tar -C /tmp/toolchain  -xjf -
          curl $deps_url/sdk-macos-x86_64.tar.bz2       | tar -C /tmp/native-sdk -xjf -
          curl $deps_url/sdk-ios-arm64.tar.bz2          | tar -C /tmp/cross-sdk  -xjf -
          for machine in native cross; do
            (
              echo "#!/bin/sh"
              echo "export PKG_CONFIG_PATH=/tmp/$machine-sdk/lib/pkgconfig"
              echo "exec /tmp/toolchain/bin/pkg-config --define-variable=frida_sdk_prefix=/tmp/$machine-sdk --static \"\$@\""
            ) > /tmp/$machine-pkg-config
            chmod +x /tmp/$machine-pkg-config
          done
          (
            echo "[constants]"
            echo "common_flags = ['-target', 'x86_64-apple-macos10.9', '-isysroot', '$(xcrun --sdk macosx --show-sdk-path)']"
            echo ""
            echo "[binaries]"
            echo "c = ['$(xcrun --sdk macosx -f clang)'] + common_flags"
            echo "cpp = ['$(xcrun --sdk macosx -f clang++)'] + common_flags"
            echo "objc = ['$(xcrun --sdk macosx -f clang)'] + common_flags"
            echo "objcpp = ['$(xcrun --sdk macosx -f clang++)'] + common_flags"
            echo "strip = '$(xcrun --sdk macosx -f strip)'"
            echo "pkgconfig = '/tmp/native-pkg-config'"
            echo ""
            echo "[built-in options]"
            echo "c_link_args = ['-Wl,-dead_strip']"
            echo ""
            echo "[host_machine]"
            echo "system = 'darwin'"
            echo "cpu_family = 'x86_64'"
            echo "cpu = 'x86_64'"
            echo "endian = 'little'"
            echo ""
            echo "[properties]"
            echo "needs_exe_wrapper = false"
          ) > /tmp/native.txt
          (
            echo "[constants]"
            echo "common_flags = ['-target', 'arm64-apple-ios8.0', '-isysroot', '$(xcrun --sdk iphoneos --show-sdk-path)']"
            echo ""
            echo "[binaries]"
            echo "c = ['$(xcrun --sdk iphoneos -f clang)'] + common_flags"
            echo "cpp = ['$(xcrun --sdk iphoneos -f clang++)'] + common_flags"
            echo "objc = ['$(xcrun --sdk iphoneos -f clang)'] + common_flags"
            echo "objcpp = ['$(xcrun --sdk iphoneos -f clang++)'] + common_flags"
            echo "strip = '$(xcrun --sdk iphoneos -f strip)'"
            echo "pkgconfig = '/tmp/cross-pkg-config'"
            echo ""
            echo "[built-in options]"
            echo "c_link_args = ['-Wl,-dead_strip']"
            echo ""
            echo "[host_machine]"
            echo "system = 'darwin'"
            echo "cpu_family = 'aarch64'"
            echo "cpu = 'aarch64'"
            echo "endian = 'little'"
            echo ""
            echo "[properties]"
            echo "needs_exe_wrapper = true"
          ) > /tmp/cross.txt
      - name: Build
        run: |
          export PATH="/tmp/toolchain/bin:$PATH"
          meson setup \
            --native-file /tmp/native.txt \
            --cross-file /tmp/cross.txt \
            --default-library static \
            -Dgumpp=enabled \
            -Dgumjs=enabled \
            -Dtests=enabled \
            build
          meson compile -C build
      - name: Package
        run: tar -C build/tests -czf /tmp/runner.tar.gz gum-tests data/
      - name: Test
        uses: frida/corellium-action@v3
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          gateway: corellium.frida.re
          device: ios-14.8-arm64
          upload: /tmp/runner.tar.gz
          run: |
            cd /usr/local
            mkdir -p opt/frida
            cd opt/frida
            tar xf $ASSET_PATH
            ./gum-tests

  android-arm64:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout frida-gum
        uses: actions/checkout@v2
      - name: Dependencies
        run: |
          pip3 install meson==0.61.2
          mkdir -p /tmp/toolchain /tmp/native-sdk /tmp/cross-sdk
          deps_url=https://build.frida.re/deps/20220130
          curl $deps_url/toolchain-linux-x86_64.tar.bz2 | tar -C /tmp/toolchain  -xjf -
          curl $deps_url/sdk-linux-x86_64.tar.bz2       | tar -C /tmp/native-sdk -xjf -
          curl $deps_url/sdk-android-arm64.tar.bz2      | tar -C /tmp/cross-sdk  -xjf -
          for machine in native cross; do
            (
              echo "#!/bin/sh"
              echo "export PKG_CONFIG_PATH=/tmp/$machine-sdk/lib/pkgconfig"
              echo "exec /tmp/toolchain/bin/pkg-config --define-variable=frida_sdk_prefix=/tmp/$machine-sdk --static \"\$@\""
            ) > /tmp/$machine-pkg-config
            chmod +x /tmp/$machine-pkg-config
          done
          (
            echo "[binaries]"
            echo "c = 'gcc'"
            echo "cpp = 'g++'"
            echo "strip = 'strip'"
            echo "pkgconfig = '/tmp/native-pkg-config'"
            echo ""
            echo "[built-in options]"
            echo "c_args = ['-ffunction-sections', '-fdata-sections']"
            echo "c_link_args = ['-Wl,--gc-sections', '-Wl,-z,noexecstack', '-Wl,-z,relro', '-Wl,-z,now']"
            echo ""
            echo "[host_machine]"
            echo "system = 'linux'"
            echo "cpu_family = 'x86_64'"
            echo "cpu = 'x86_64'"
            echo "endian = 'little'"
            echo ""
            echo "[properties]"
            echo "needs_exe_wrapper = false"
          ) > /tmp/native.txt
          (
            bindir=$ANDROID_NDK_LATEST_HOME/toolchains/llvm/prebuilt/linux-x86_64/bin
            echo "[binaries]"
            echo "c = '$bindir/aarch64-linux-android21-clang'"
            echo "cpp = '$bindir/aarch64-linux-android21-clang++'"
            echo "strip = '$bindir/llvm-strip'"
            echo "pkgconfig = '/tmp/cross-pkg-config'"
            echo ""
            echo "[built-in options]"
            echo "c_args = ['-DANDROID', '-ffunction-sections', '-fdata-sections']"
            echo "c_link_args = ['-Wl,--gc-sections', '-Wl,-z,noexecstack', '-Wl,-z,relro', '-Wl,-z,now']"
            echo "cpp_link_args = ['-static-libstdc++']"
            echo ""
            echo "[host_machine]"
            echo "system = 'linux'"
            echo "cpu_family = 'aarch64'"
            echo "cpu = 'aarch64'"
            echo "endian = 'little'"
            echo ""
            echo "[properties]"
            echo "needs_exe_wrapper = true"
          ) > /tmp/cross.txt
      - name: Build
        run: |
          export PATH="/tmp/toolchain/bin:$PATH"
          meson setup \
            --native-file /tmp/native.txt \
            --cross-file /tmp/cross.txt \
            --default-library static \
            -Dgumpp=enabled \
            -Dgumjs=enabled \
            -Dtests=enabled \
            build
          meson compile -C build
      - name: Package
        run: tar -C build/tests -czf /tmp/runner.tar.gz gum-tests data/
      - name: Test
        uses: frida/corellium-action@v3
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          gateway: corellium.frida.re
          device: android-8.1.0-arm64
          upload: /tmp/runner.tar.gz
          run: |
            cd /data/local/tmp
            tar xf $ASSET_PATH
            LD_LIBRARY_PATH=/apex/com.android.art/lib64:/apex/com.android.runtime/lib64 ./gum-tests
