gumjs_headers = [
  'gumjs.h',
  'gumscript.h',
  'gumscriptbackend.h',
  'gumscriptscheduler.h',
  'guminspectorserver.h',
]

gumjs_sources = [
  'gumjs.c',
  'gumscript.c',
  'gumscriptbackend.c',
  'gumscriptscheduler.c',
  'guminspectorserver.c',
  'gumscripttask.c',
  'gumsourcemap.c',
  'gummemoryvfs.c',
  'gumffi.c',
  'gumcmodule.c',
]

gumjs_objects = []
if have_quickjs
  gumjs_objects += quickjs.extract_all_objects()
  gumjs_extra_deps += [quickjs_dep]
endif
if have_tinycc
  gumjs_objects += tinycc.extract_all_objects()
  gumjs_extra_deps += [tinycc_dep]
endif

if have_quickjs
  gumjs_sources += [
    'gumquickscriptbackend.c',
    'gumquickscript.c',
    'gumquickvalue.c',
    'gumquickcore.c',
    'gumquickinterceptor.c',
    'gumquickstalker.c',
  ]
endif

if have_duktape
  gumjs_sources += [
    'gumdukscriptbackend.c',
    'gumdukscript.c',
    'gumdukbundle.c',
    'gumdukvalue.c',
    'gumdukobject.c',
    'gumdukcore.c',
    'gumdukkernel.c',
    'gumdukmemory.c',
    'gumdukprocess.c',
    'gumdukthread.c',
    'gumdukmodule.c',
    'gumdukfile.c',
    'gumdukstream.c',
    'gumduksocket.c',
    'gumdukdatabase.c',
    'gumdukinterceptor.c',
    'gumdukstalker.c',
    'gumdukeventsink.c',
    'gumdukapiresolver.c',
    'gumduksymbol.c',
    'gumdukcmodule.c',
    'gumdukinstruction.c',
    'gumdukcodewriter.c',
    'gumdukcoderelocator.c',
    'gumdukcompat.c',
    'duktape.c',
  ]
endif

if have_v8
  gumjs_sources += [
    'gumv8scriptbackend.cpp',
    'gumv8script.cpp',
    'gumv8platform.cpp',
    'gumv8bundle.cpp',
    'gumv8scope.cpp',
    'gumv8value.cpp',
    'gumv8object.cpp',
    'gumv8core.cpp',
    'gumv8kernel.cpp',
    'gumv8memory.cpp',
    'gumv8process.cpp',
    'gumv8thread.cpp',
    'gumv8module.cpp',
    'gumv8file.cpp',
    'gumv8stream.cpp',
    'gumv8socket.cpp',
    'gumv8database.cpp',
    'gumv8interceptor.cpp',
    'gumv8stalker.cpp',
    'gumv8eventsink.cpp',
    'gumv8apiresolver.cpp',
    'gumv8symbol.cpp',
    'gumv8cmodule.cpp',
    'gumv8instruction.cpp',
    'gumv8codewriter.cpp',
    'gumv8coderelocator.cpp',
  ]
endif

gumjs_generated_origins = [
  'arch-x86/gumx86writer.h',
  'arch-x86/gumx86relocator.h',
  'arch-arm/gumarmwriter.h',
  'arch-arm/gumarmrelocator.h',
  'arch-arm/gumthumbwriter.h',
  'arch-arm/gumthumbrelocator.h',
  'arch-arm64/gumarm64writer.h',
  'arch-arm64/gumarm64relocator.h',
  'arch-mips/gummipswriter.h',
  'arch-mips/gummipsrelocator.h',
]
gumjs_generated_inputs = []
foreach o : gumjs_generated_origins
  gumjs_generated_inputs += join_paths(meson.source_root(), 'gum', o)
endforeach
gumjs_generated_outputs = []
runtimes = []
if have_duktape
  runtimes += 'duk'
endif
if have_v8
  runtimes += 'v8'
endif
autogenerated_modules = [
  'writer',
  'relocator',
]
autogenerated_flavors = [
  'x86',
  'arm',
  'thumb',
  'arm64',
  'mips',
]
autogenerated_sections = [
  '',
  '-fields',
  '-methods',
  '-init',
  '-dispose',
]
foreach r : runtimes
  foreach m : autogenerated_modules
    foreach s : autogenerated_sections
      gumjs_generated_outputs += 'gum@0@code@1@@2@.inc'.format(r, m, s)
      foreach f : autogenerated_flavors
        gumjs_generated_outputs += 'gum@0@code@1@@2@-@3@.inc'.format(r, m, s, f)
      endforeach
    endforeach
  endforeach
endforeach

gumjs_runtime_sources = [
  'runtime/entrypoint-v8.js',
  'runtime/entrypoint-duktape.js',
  'runtime/core.js',
  'runtime/message-dispatcher.js',
  'runtime/error-handler-v8.js',
  'runtime/error-handler-duktape.js',
  'runtime/console.js',
  'runtime/hexdump.js',
  'runtime/promise.js',
  'runtime/objc.js',
  'runtime/java.js',
  'runtime/cmodule/inttypes.h',
  'runtime/cmodule/stdint.h',
  'runtime/cmodule/stdio.h',
  'runtime/cmodule/stdlib.h',
  'runtime/cmodule/string.h',
  'runtime/cmodule/glib.h',
  'runtime/cmodule/gum/gumdefs.h',
  'runtime/cmodule/gum/gumprocess.h',
  'runtime/cmodule/gum/gummodulemap.h',
  'runtime/cmodule/gum/gummemory.h',
  'runtime/cmodule/gum/guminterceptor.h',
  'runtime/cmodule/gum/gumstalker.h',
  'runtime/cmodule/gum/gummetalarray.h',
  'runtime/cmodule/gum/gummetalhash.h',
  'runtime/cmodule/gum/gumspinlock.h',
  'runtime/cmodule/json-glib/json-glib.h',
]
gumjs_runtime_outputs = [
  'gumdukscript-runtime.h',
  'gumdukscript-promise.h',
  'gumdukscript-objc.h',
  'gumdukscript-java.h',
  'gumv8script-runtime.h',
  'gumv8script-objc.h',
  'gumv8script-java.h',
  'gumcmodule-runtime.h',
]

install_headers(gumjs_headers, subdir: install_header_basedir + '/gumjs')

gumjs_generated_bindings = custom_target('gumjs-generated-bindings',
  input: gumjs_generated_inputs,
  output: gumjs_generated_outputs,
  command: [
    find_program('generate-bindings.py'),
    join_paths(meson.source_root(), 'gum'),
    meson.current_build_dir(),
  ],
)
gumjs_sources += [gumjs_generated_bindings]

gumjs_runtime = custom_target('gumjs-runtime',
  input: gumjs_runtime_sources,
  output: gumjs_runtime_outputs,
  command: [
    find_program('generate-runtime.py'),
    host_arch,
    meson.current_source_dir(),
    join_paths(meson.source_root(), 'gum'),
    capstone_dep.get_pkgconfig_variable('includedir'),
    meson.current_build_dir(),
  ],
)
gumjs_sources += [gumjs_runtime]

gumjs = library('frida-gumjs-' + api_version, gumjs_sources,
  c_args: frida_component_cflags,
  override_options: ['cpp_std=c++11'],
  include_directories: [bindings_inc],
  dependencies: [gum_dep, gio_dep, json_glib_dep, ffi_dep, sqlite_dep, libsoup_dep] + gumjs_extra_deps,
  objects: gumjs_objects,
  install: true,
)

gumjs_dep = declare_dependency(link_with: gumjs,
  include_directories: [bindings_inc, include_directories('.')],
  dependencies: [gum_dep, gio_dep, json_glib_dep] + gumjs_extra_deps,
)

pkg = import('pkgconfig')
pkg.generate(filebase: 'frida-gumjs-' + api_version,
  name: 'GumJS',
  version: gum_version,
  description: 'Gum JavaScript bindings',
  requires: ['frida-gum-' + api_version, 'json-glib-1.0'],
  requires_private: ['gio-2.0', 'libffi', 'capstone'] + gumjs_extra_requires,
  subdirs: install_header_basedir,
  libraries: [gumjs],
  libraries_private: gumjs_extra_libraries,
  variables: [
    'gumjs_quickjs=' + have_quickjs.to_string('enabled', 'disabled'),
    'gumjs_duktape=' + have_duktape.to_string('enabled', 'disabled'),
    'gumjs_v8=' + have_v8.to_string('enabled', 'disabled'),
  ],
)
